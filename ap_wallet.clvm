(mod (new_puzzle new_solution my_parent my_puzzle_hash)

       ; takes a lisp tree and returns the hash of it
       (defun sha256tree1 (TREE)
            (if (l TREE)
                (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
                (sha256 1 TREE)
            )
        )

        (defmacro create_outputs (puz solution)
            (qq ((c (unquote puz) (unquote solution))))
        )

        (defmacro add_aggsig (APUBKEY puzhash)
          (qq (c (q 50) (c (q (unquote APUBKEY)) (c (unquote puzhash) (q ())))))
        )

        (defmacro assert_my_value (my_parent my_puzzle sum)
          (qq (c (q 53) (c (sha256 (unquote my_parent) (unquote my_puzzle) (unquote sum)) (q ()))))
        )

        (defmacro aggsig_entire_solution SOLUTION
          (q (c (q 57) (c (q "B_PUBKEY") (c (sha256tree1 (a)) (q ())))))
        )

        (defun aggsig_outputs_and_assert_my_value (loop my_output my_parent my_puzzle running_sum)
          (if loop
            (if (= (f (f loop)) (q 51))
              (aggsig_outputs_and_assert_my_value (r loop) (c (f loop) (c (add_aggsig "A_PUBKEY" (f (r (f loop)))) my_output)) my_parent my_puzzle (+ (f (r (r (f loop)))) running_sum))
              (aggsig_outputs_and_assert_my_value (r loop) (c (f loop) my_output) my_parent my_puzzle running_sum)
            )
            (c (assert_my_value my_parent my_puzzle running_sum) my_output)
          )
        )

        (c (aggsig_entire_solution (new_puzzle new_solution my_parent my_puzzle_hash)) (aggsig_outputs_and_assert_my_value (create_outputs new_puzzle new_solution) () my_parent my_puzzle_hash ()))
)
