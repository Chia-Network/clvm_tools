(mod (mode amount new_puz identity my_puzhash parent_innerpuz_amounts_for_recovery_ids)
  ;identity is either my_id or id_to_attest depending on mode
  ;new_puz is the puz to attest in the attest case

  ;EXAMPLE SOLUTION (0 100 0xfadeddab 0xdeadbeef 0xcafef00d)

  (defconstant identities_list (0x12341234 0x12361236 0xabcdabcd))
  (defconstant OP_AGG_SIG 50)
  (defconstant OP_CREATE_COIN 51)
  (defconstant OP_ASSERT_CONSUMED 52)
  (defconstant OP_AGG_SIG_ME 57)

  ; takes a lisp tree and returns the hash of it
  (defun sha256tree1 (TREE)
      (if (l TREE)
          (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
          (sha256 1 TREE)
      )
  )

  (defmacro create_message (recovering_coin new_innerpuz)
    (qq (r (r (c (q (unquote recovering_coin)) (c (q (unquote new_innerpuz)) (q ()))))))
  )

  (defun create_consume_message (identity my_id new_innerpuz)
    (list OP_ASSERT_CONSUMED (sha256 identity (sha256tree1 (create_message my_id new_innerpuz)) 0))
  )

  (defun create_coin_id_from_identity (parent innerpuz identity amount)
    (sha256 parent (create_fullpuz_for_id innerpuz identity) amount)
  )

  (defmacro attest_to_id_and_newpuz (identity new_innerpuz)
    (qq (c OP_CREATE_COIN (c (sha256tree1 (create_message (unquote identity) (unquote new_innerpuz))) (q (0)))))
  )

  (defmacro recreate_self (my_puzhash amount)
    (qq (c OP_CREATE_COIN (c (unquote my_puzhash) (c (unquote amount) (q ())))))
  )

  (defmacro create_new_coin (amount new_puz)
    (qq (c OP_CREATE_COIN (c (unquote new_puz) (c (unquote amount) (q ())))))
  )

  (defun check_messages_from_identities (identities my_id output new_puz)
    (if identities
      (check_messages_from_identities (r identities) my_id (c (create_consume_message (f identities) my_id new_puz) output) new_puz)
      output
    )
  )

  (defmacro assert_consumed_identity identity
    (qq (c OP_ASSERT_CONSUMED (c identity (q ()))))
  )

  (defun create_aggsig_me (message)
    (list OP_AGG_SIG_ME (q "PUBKEY") message)
  )

  ;Spend modes:
  ;0 = normal spend
  ;1 = attest
  ;2 (or anything else) = recovery

  ;MAIN

  (if mode
    (if (= mode (q 1))
      ; mode one - attest
      (list (recreate_self my_puzhash amount) (attest_to_id_and_newpuz identity new_puz) (create_aggsig_me new_puz) (assert_consumed_identity identity))
      ; mode two - recovery
      (check_messages_from_identities identities_list identity (list (create_new_coin amount new_puz)) new_puz)
    )
    ; mode zero - normal spend
    (list (create_new_coin amount new_puz) (create_aggsig_me new_puz))
  )

  ;HERE BE TESTS
  ;(create_new_coin amount new_puz)
  ;(list OP_AGG_SIG_ME (q "PUBKEY") new_puz)
  ;(list (create_new_coin amount new_puz) (list OP_AGG_SIG_ME (q "PUBKEY") new_puz))
  ;(list (recreate_self new_puzhash amount) (attest_to_id_and_newpuz identity new_puz) (list OP_AGG_SIG_ME (q "PUBKEY") new_puz) (assert_consumed_identity identity))
  ;(create_consume_message (f identities_list) identity new_puz)
  ;(check_messages_from_identities identities_list identity (list (create_new_coin amount new_puz)) new_puz)

)
